// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Data.Migrations.Postgres
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Entities.Airline", b =>
                {
                    b.Property<string>("AirlineName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueCarrier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.HasKey("AirlineName")
                        .HasName("PK__Airlines__E6B3FF59897A8205");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("API.Entities.Airport", b =>
                {
                    b.Property<string>("AirportName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Airport_Name");

                    b.Property<string>("AirportCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Airport_Code");

                    b.HasKey("AirportName")
                        .HasName("PK__Airports__34A7AB6E169FA657");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("API.Entities.TailNumber", b =>
                {
                    b.Property<string>("TailNum")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.HasKey("TailNum")
                        .HasName("PK__Tail_Num__90AA504830AF2851");

                    b.ToTable("Tail_Numbers", (string)null);
                });

            modelBuilder.Entity("API.Entities.Training", b =>
                {
                    b.Property<int>("ScheduledDepTime")
                        .HasColumnType("integer");

                    b.Property<string>("AirlineName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TailNum")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double>("ArrPrecipitation")
                        .HasColumnType("double precision");

                    b.Property<double>("ArrRain")
                        .HasColumnType("double precision");

                    b.Property<double>("ArrSnowFall")
                        .HasColumnType("double precision");

                    b.Property<double>("ArrTemperature")
                        .HasColumnType("double precision");

                    b.Property<double>("ArrWindDirection")
                        .HasColumnType("double precision");

                    b.Property<double>("ArrWindSpeed")
                        .HasColumnType("double precision");

                    b.Property<double>("DepPrecipitation")
                        .HasColumnType("double precision");

                    b.Property<double>("DepRain")
                        .HasColumnType("double precision");

                    b.Property<double>("DepSnowFall")
                        .HasColumnType("double precision");

                    b.Property<double>("DepTemperature")
                        .HasColumnType("double precision");

                    b.Property<double>("DepWindDirection")
                        .HasColumnType("double precision");

                    b.Property<double>("DepWindSpeed")
                        .HasColumnType("double precision");

                    b.Property<string>("DestAirport")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Dest_Airport");

                    b.Property<int>("Distance")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDelayed")
                        .HasColumnType("boolean");

                    b.Property<string>("OrgAirport")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Org_Airport");

                    b.Property<int>("ScheduledArrTime")
                        .HasColumnType("integer");

                    b.HasKey("ScheduledDepTime", "AirlineName", "TailNum", "Date")
                        .HasName("PK__Training__39DE829EBC998803");

                    b.HasIndex("AirlineName");

                    b.HasIndex("DestAirport");

                    b.HasIndex("OrgAirport");

                    b.HasIndex("TailNum");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Username")
                        .HasName("PK__Users__536C85E50075D7BD");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.UserPrediction", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ScheduledDepTime")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("AirlineName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<double>("ArrPrecipitation")
                        .HasColumnType("double precision");

                    b.Property<double>("ArrRain")
                        .HasColumnType("double precision");

                    b.Property<double>("ArrSnowFall")
                        .HasColumnType("double precision");

                    b.Property<double>("ArrTemperature")
                        .HasColumnType("double precision");

                    b.Property<double>("ArrWindDirection")
                        .HasColumnType("double precision");

                    b.Property<double>("ArrWindSpeed")
                        .HasColumnType("double precision");

                    b.Property<double>("DepPrecipitation")
                        .HasColumnType("double precision");

                    b.Property<double>("DepRain")
                        .HasColumnType("double precision");

                    b.Property<double>("DepSnowFall")
                        .HasColumnType("double precision");

                    b.Property<double>("DepTemperature")
                        .HasColumnType("double precision");

                    b.Property<double>("DepWindDirection")
                        .HasColumnType("double precision");

                    b.Property<double>("DepWindSpeed")
                        .HasColumnType("double precision");

                    b.Property<string>("DestAirport")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Dest_Airport");

                    b.Property<int>("Distance")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDelayedActual")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelayedPredicted")
                        .HasColumnType("boolean");

                    b.Property<string>("OrgAirport")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Org_Airport");

                    b.Property<int>("ScheduledArrTime")
                        .HasColumnType("integer");

                    b.Property<string>("TailNum")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Username", "ScheduledDepTime", "Date")
                        .HasName("PK__User_Pre__86FE9BD31D1DBDAC");

                    b.HasIndex("AirlineName");

                    b.HasIndex("DestAirport");

                    b.HasIndex("OrgAirport");

                    b.HasIndex("TailNum");

                    b.ToTable("User_Predictions", (string)null);
                });

            modelBuilder.Entity("API.Entities.Training", b =>
                {
                    b.HasOne("API.Entities.Airline", "AirlineNameNavigation")
                        .WithMany("Training")
                        .HasForeignKey("AirlineName")
                        .IsRequired()
                        .HasConstraintName("FK__Training__Airlin__40F9A68C");

                    b.HasOne("API.Entities.Airport", "DestAirportNavigation")
                        .WithMany("TrainingDestAirportNavigations")
                        .HasForeignKey("DestAirport")
                        .IsRequired()
                        .HasConstraintName("FK__Training__Dest_A__43D61337");

                    b.HasOne("API.Entities.Airport", "OrgAirportNavigation")
                        .WithMany("TrainingOrgAirportNavigations")
                        .HasForeignKey("OrgAirport")
                        .IsRequired()
                        .HasConstraintName("FK__Training__Org_Ai__42E1EEFE");

                    b.HasOne("API.Entities.TailNumber", "TailNumNavigation")
                        .WithMany("Training")
                        .HasForeignKey("TailNum")
                        .IsRequired()
                        .HasConstraintName("FK__Training__TailNu__41EDCAC5");

                    b.Navigation("AirlineNameNavigation");

                    b.Navigation("DestAirportNavigation");

                    b.Navigation("OrgAirportNavigation");

                    b.Navigation("TailNumNavigation");
                });

            modelBuilder.Entity("API.Entities.UserPrediction", b =>
                {
                    b.HasOne("API.Entities.Airline", "AirlineNameNavigation")
                        .WithMany("UserPredictions")
                        .HasForeignKey("AirlineName")
                        .IsRequired()
                        .HasConstraintName("FK__User_Pred__Airli__634EBE90");

                    b.HasOne("API.Entities.Airport", "DestAirportNavigation")
                        .WithMany("UserPredictionDestAirportNavigations")
                        .HasForeignKey("DestAirport")
                        .IsRequired()
                        .HasConstraintName("FK__User_Pred__Dest___662B2B3B");

                    b.HasOne("API.Entities.Airport", "OrgAirportNavigation")
                        .WithMany("UserPredictionOrgAirportNavigations")
                        .HasForeignKey("OrgAirport")
                        .IsRequired()
                        .HasConstraintName("FK__User_Pred__Org_A__65370702");

                    b.HasOne("API.Entities.TailNumber", "TailNumNavigation")
                        .WithMany("UserPredictions")
                        .HasForeignKey("TailNum")
                        .IsRequired()
                        .HasConstraintName("FK__User_Pred__TailN__6442E2C9");

                    b.HasOne("API.Entities.User", "UsernameNavigation")
                        .WithMany("UserPredictions")
                        .HasForeignKey("Username")
                        .IsRequired()
                        .HasConstraintName("FK__User_Pred__Usern__625A9A57");

                    b.Navigation("AirlineNameNavigation");

                    b.Navigation("DestAirportNavigation");

                    b.Navigation("OrgAirportNavigation");

                    b.Navigation("TailNumNavigation");

                    b.Navigation("UsernameNavigation");
                });

            modelBuilder.Entity("API.Entities.Airline", b =>
                {
                    b.Navigation("Training");

                    b.Navigation("UserPredictions");
                });

            modelBuilder.Entity("API.Entities.Airport", b =>
                {
                    b.Navigation("TrainingDestAirportNavigations");

                    b.Navigation("TrainingOrgAirportNavigations");

                    b.Navigation("UserPredictionDestAirportNavigations");

                    b.Navigation("UserPredictionOrgAirportNavigations");
                });

            modelBuilder.Entity("API.Entities.TailNumber", b =>
                {
                    b.Navigation("Training");

                    b.Navigation("UserPredictions");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Navigation("UserPredictions");
                });
#pragma warning restore 612, 618
        }
    }
}
